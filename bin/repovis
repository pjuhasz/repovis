#!/usr/bin/perl

use 5.010001;
use strict;
use warnings;

use Getopt::Long qw/:config no_ignore_case bundling/;
use Pod::Usage;

use VCS::Visualize;

my %options = (
	'analyze-all' => 0,
	'Animate'     => 0,
	'revision'    => undef,
	'include'     => undef,
	'exclude'     => undef,
	'curve'       => 'KochelCurve',
	'cache-dir'   => undef,
	'format'      => undef,
	'output'      => undef,
	'verbose'     => 0,
);

GetOptions(\%options,
	'analyze-all|a!',
	'Animate|A!',
	'revision|r=s@',
	'include|I=s@',
	'exclude|X=s@',
	'curve|c=s',
	'cache-dir=s',
	'format|f=s',
	'output|o=s',
	'verbose|v+',
) or pod2usage(2);
pod2usage(1) if $options{help};

$| = 1 if $options{verbose};

# The remaining cmd line arguments are interpreted as target directories
$ARGV[0] //= '.';
my @dirs = @ARGV;

# init main visualizer ojject
my $vis = VCS::Visualize->new(
	dirs         => [@dirs],
	include      => $options{include},
	exclude      => $options{exclude},
	curve_module => $options{curve},
	verbose      => $options{verbose},
);

# if no revision was specified, assume the current revision
my $revisions = $options{revision} // [ undef ];

# however, in analyze mode, analyze all revisions
if ($options{'analyze-all'}) {
	$vis->analyze_all();
}
else {
	for my $rev (@$revisions) {
		$vis->analyze_one_rev($rev);
	}
}

if ($options{Animate}) {
# TODO create animgif or something
}
elsif (defined $options{format}) {
# TODO  create file	
}
else {
# TODO launch gnuplot interactively
}
